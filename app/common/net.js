"use strict";
// app: sports
// class: net
// purpose: network operations
// author: mauricio dos santos
// date: january 12 2019
Object.defineProperty(exports, "__esModule", { value: true });
var app_1 = require("./app");
var core_1 = require("@angular/core");
var kinvey_nativescript_sdk_1 = require("kinvey-nativescript-sdk");
var net = /** @class */ (function () {
    function net(app) {
        this.app = app;
        this.SalesRepsDS = kinvey_nativescript_sdk_1.Kinvey.DataStore.collection('SalesReps');
        this.CustomersDS = kinvey_nativescript_sdk_1.Kinvey.DataStore.collection('Customers');
        this.OrdersDS = kinvey_nativescript_sdk_1.Kinvey.DataStore.collection('Orders');
        this.OrderLinesDS = kinvey_nativescript_sdk_1.Kinvey.DataStore.collection('OrderLines');
        this.ItemsDS = kinvey_nativescript_sdk_1.Kinvey.DataStore.collection('Items');
        this.ItemImagesDS = kinvey_nativescript_sdk_1.Kinvey.DataStore.collection('ItemImages');
        console.log('net constructor');
        kinvey_nativescript_sdk_1.Kinvey.init({
            appKey: this.app.props.appKey,
            appSecret: this.app.props.appSecret
        });
    }
    // ===== authenticate =====
    // userName (string): user login id
    // password (string): password
    // onSuccess (method): success callback method
    // onError (method, optional): error callback method
    net.prototype.authenticate = function (params) {
        var _this = this;
        console.log('net authenticate', params.userName, params.password);
        kinvey_nativescript_sdk_1.Kinvey.ping()
            .then(function (response) {
            console.log('Kinvey Ping Success', response.version, response.kinvey);
            kinvey_nativescript_sdk_1.Kinvey.User.logout()
                .then(function () {
                console.log('Kinvey Logout Successful');
                kinvey_nativescript_sdk_1.Kinvey.User.login(params.userName, params.password)
                    .then(function (user) {
                    console.log('Kinvey Login Successful', user);
                    _this.userName = params.userName;
                    _this.getSalesRep({
                        SalesRep: _this.userName,
                        onSuccess: function (RepName) { return params.onSuccess(RepName); }
                    });
                })
                    .catch(function (error) {
                    console.error('Kinvey Login Failed', error.name);
                    params.onError();
                });
            })
                .catch(function (error) {
                console.error('Kinvey Logout Failed', error.name);
                params.onError();
            });
        })
            .catch(function (error) {
            console.error('Kinvey Ping Failed', error.name);
            params.onError();
        });
    };
    // ===== getCustomers =====
    // loadMoreItems (boolean): load next batch or first batch
    // sortField (string): field on which to sort entities
    // onSuccess (method): success callback method
    net.prototype.getCustomers = function (params) {
        console.log('net getCustomers');
        if (params.loadMoreItems)
            this.skip = this.skip + this.app.props.limit;
        else
            this.skip = 0;
        var skipFirstResults = false;
        var query = new kinvey_nativescript_sdk_1.Kinvey.Query;
        query.equalTo('SalesRep', this.userName);
        query.skip = this.skip;
        query.limit = this.app.props.limit;
        query.fields = ['CustNum', 'Name'];
        query.ascending(params.sortField);
        this.CustomersDS.find(query).subscribe(function (customers) {
            console.log('------------ RESULTS # -----------', customers.length);
            if (skipFirstResults)
                params.onSuccess(customers);
            skipFirstResults = true;
        }, function (error) {
            console.error('------------- ERROR fetching customers -------------', error.name);
            params.onError();
        });
    };
    // ===== getCustomer =====
    // _id (string): customer entity id
    // onSuccess (method): success callback method
    net.prototype.getCustomer = function (params) {
        console.log('net getCustomers', params._id);
        var skipFirstResults = false;
        this.CustomersDS.findById(params._id).subscribe(function (customer) {
            console.log('------------ CUSTOMER -----------', customer);
            if (skipFirstResults)
                params.onSuccess(customer);
            skipFirstResults = true;
        }, function (error) {
            console.error('------------ ERROR fetching customer --------------', error.name);
            params.onError();
        });
    };
    // ===== getSalesRep =====
    // SalesRep (string): sales rep 3-letter acronym
    // onSuccess (method): success callback method
    net.prototype.getSalesRep = function (params) {
        console.log('net getSalesRep', params.SalesRep);
        var skipFirstResults = false;
        var query = new kinvey_nativescript_sdk_1.Kinvey.Query;
        query.equalTo('SalesRep', params.SalesRep);
        query.fields = ['RepName'];
        this.SalesRepsDS.find(query).subscribe(function (rep) {
            console.log('------------ SALES REP -----------', rep);
            if (skipFirstResults)
                params.onSuccess(rep[0].RepName);
            skipFirstResults = true;
        }, function (error) {
            console.error('------------ ERROR fetching sales rep ------------', error.name);
            params.onError();
        });
    };
    // ===== getOrders =====
    // CustNum (string): customer number
    // onSuccess (method): success callback method
    net.prototype.getOrders = function (params) {
        console.log('net getOrders', params.CustNum);
        var skipFirstResults = false;
        var query = new kinvey_nativescript_sdk_1.Kinvey.Query;
        query.equalTo('CustNum', Number(params.CustNum));
        query.limit = this.app.props.limit;
        query.fields = ['Ordernum', 'OrderDate', 'OrderStatus'];
        query.ascending(params.OrderDate);
        this.OrdersDS.find(query).subscribe(function (orders) {
            console.log('------------ RESULTS # -----------', orders.length);
            if (skipFirstResults)
                params.onSuccess(orders);
            skipFirstResults = true;
        }, function (error) {
            console.error('------------ ERROR fetching orders -------------', error.name);
            params.onError();
        });
    };
    // ===== getOrderLines =====
    // Ordernum (string): order number
    // onSuccess (method): success callback method
    net.prototype.getOrderLines = function (params) {
        console.log('net getOrderLines', params.Ordernum);
        var skipFirstResults = false;
        var query = new kinvey_nativescript_sdk_1.Kinvey.Query;
        query.equalTo('Ordernum', Number(params.Ordernum));
        query.limit = this.app.props.limit;
        query.fields = ['Linenum', 'Itemnum', 'Price', 'Qty'];
        query.ascending('Linenum');
        this.OrderLinesDS.find(query).subscribe(function (lines) {
            console.log('------------ RESULTS # -----------', lines.length);
            if (skipFirstResults)
                params.onSuccess(lines);
            skipFirstResults = true;
        }, function (error) {
            console.error('------------ ERROR fetching order lines -------------', error.name);
            params.onError();
        });
    };
    // ===== getItem =====
    // Itemnum (string): item number
    // onSuccess (method): success callback method
    net.prototype.getItem = function (params) {
        console.log('net getItem', params.Itemnum);
        var skipFirstResults = false;
        var query = new kinvey_nativescript_sdk_1.Kinvey.Query;
        query.equalTo('Itemnum', Number(params.Itemnum));
        this.ItemsDS.find(query).subscribe(function (item) {
            if (skipFirstResults)
                params.onSuccess(item[0]);
            skipFirstResults = true;
        }, function (error) {
            console.error('------------- ERROR fetching item --------------', error.name);
            params.onError();
        });
    };
    // ===== saveItem =====
    // itemData (string): item data
    // onSuccess (method): success callback method
    net.prototype.saveItem = function (params) {
        console.log('net saveItem');
        this.ItemsDS.save(params.itemData).then(function (item) {
            console.log('SAVED ITEM');
        }).catch(function (err) {
            console.error('------------- ERROR saving item -------------', err.name);
        });
    };
    // ===== getItemImage =====
    // _id (string): item entity id
    // onSuccess (method): success callback method
    net.prototype.getItemImage = function (params) {
        console.log('net getItemImage', params._id);
        var skipFirstResults = false;
        this.ItemImagesDS.findById(params._id).subscribe(function (itemImage) {
            if (skipFirstResults)
                params.onSuccess(itemImage.base64Image);
            skipFirstResults = true;
        }, function (error) {
            params.onSuccess();
        });
    };
    // ===== saveItemImage =====
    // _id (string): item entity id
    // base64Image: base-64 encoded image data
    // onSuccess (method): success callback method
    net.prototype.saveItemImage = function (params) {
        console.log('net saveItemImage');
        this.ItemImagesDS.save({
            _id: params._id,
            base64Image: params.base64Image
        }).then(function (itemImage) {
            console.log('SAVED ITEM IMAGE');
        }).catch(function (err) {
            console.error('------------- ERROR saving item image -------------', err.name);
        });
    };
    net = __decorate([
        core_1.Injectable(),
        __metadata("design:paramtypes", [app_1.app])
    ], net);
    return net;
}());
exports.net = net;
//# sourceMappingURL=data:application/json;base64,