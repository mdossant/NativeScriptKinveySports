"use strict";
// app: sports
// class: item
// purpose: download and show item
// author: mauricio dos santos
// date: january 20 2019
Object.defineProperty(exports, "__esModule", { value: true });
var app_1 = require("../common/app");
var net_1 = require("../common/net");
var core_1 = require("@angular/core");
var router_1 = require("nativescript-angular/router");
var router_2 = require("@angular/router");
var page_1 = require("tns-core-modules/ui/page");
var image_source_1 = require("tns-core-modules/image-source");
var enums_1 = require("tns-core-modules/ui/enums");
var dialog = require("tns-core-modules/ui/dialogs");
var camera = require("nativescript-camera");
var ItemComponent = /** @class */ (function () {
    function ItemComponent(app, net, page, router, screen) {
        this.app = app;
        this.net = net;
        this.page = page;
        this.router = router;
        this.screen = screen;
        this.backIcon = String.fromCharCode(0xea40);
        this.cameraIcon = String.fromCharCode(0xe90f);
        this.dsItem = {};
        this.itemData = [];
    }
    ItemComponent.prototype.ngOnInit = function () {
        var _this = this;
        console.log('item ngOnInit');
        this.loading = true;
        this.title = 'Loading item...';
        this.RepName = this.screen.snapshot.params['RepName'];
        this.CustNum = this.screen.snapshot.params['CustNum'];
        this.Name = this.screen.snapshot.params['Name'];
        this.Ordernum = this.screen.snapshot.params['Ordernum'];
        this.Itemnum = this.screen.snapshot.params['Itemnum'];
        this.itemImage = this.page.getViewById('itemImage');
        setTimeout(function () { return _this.getItem(); }, 50);
    };
    ItemComponent.prototype.animateBall = function (target) {
        var _this = this;
        console.log('item animateBall');
        this.ballState = !this.ballState;
        if (this.ballState)
            target.animate({ translate: { x: 0, y: 100 }, duration: 200, curve: enums_1.AnimationCurve.easeIn }).then(function () { if (_this.loading)
                _this.animateBall(target); });
        else
            target.animate({ translate: { x: 0, y: 0 }, duration: 500, curve: enums_1.AnimationCurve.easeOut }).then(function () { if (_this.loading)
                _this.animateBall(target); });
    };
    ItemComponent.prototype.getItem = function () {
        var _this = this;
        console.log('item getItem');
        this.net.getItem({
            Itemnum: this.Itemnum,
            onSuccess: function (dsItem) {
                _this.net.getItemImage({
                    _id: dsItem._id,
                    onSuccess: function (base64Image) {
                        dsItem.base64Image = base64Image;
                        _this.showItem(dsItem);
                    }
                });
            },
            onError: function () {
                _this.loading = false;
                dialog.confirm({
                    title: 'Could Not Download Item',
                    message: 'Ensure your have a strong network signal and sign in again.',
                    okButtonText: 'OK'
                }).then(function () { return _this.showOrderLines(); });
            }
        });
    };
    ItemComponent.prototype.showItem = function (dsItem) {
        var _this = this;
        console.log('item showItem');
        this.title = dsItem.ItemName;
        this.dsItem = dsItem;
        this.itemData.push({ columnLabel: 'Item#', columnValue: this.Itemnum });
        this.itemData.push({ columnLabel: 'Name', columnValue: dsItem.ItemName });
        this.itemData.push({ columnLabel: 'Category', columnValue: dsItem.Category2 });
        this.itemData.push({ columnLabel: 'Subcategory', columnValue: dsItem.Category1 });
        this.itemData.push({ columnLabel: 'On Hand', columnValue: dsItem.Onhand });
        this.itemData.push({ columnLabel: 'Allocated', columnValue: dsItem.Allocated });
        this.itemData.push({ columnLabel: 'Available', columnValue: dsItem.Onhand - dsItem.Allocated });
        this.itemData.push({ columnLabel: 'Price', columnValue: '$' + dsItem.Price });
        if (dsItem.base64Image) {
            var imgSrc_1 = new image_source_1.ImageSource();
            imgSrc_1.fromBase64(dsItem.base64Image).then(function () { return _this.itemImage.src = imgSrc_1; });
        }
        this.loading = false;
    };
    ItemComponent.prototype.takePicture = function () {
        var _this = this;
        console.log('item takePicture', camera.isAvailable());
        if (camera.isAvailable())
            camera.takePicture({ keepAspectRatio: true, width: 120 }).then(function (imageAsset) {
                var imgSrc = new image_source_1.ImageSource();
                imgSrc.fromAsset(imageAsset).then(function (img) {
                    var base64Image = img.toBase64String("jpg", 60);
                    _this.itemImage.src = img;
                    _this.net.saveItemImage({
                        _id: _this.dsItem['_id'],
                        base64Image: base64Image
                    });
                });
            });
        else
            dialog.alert('Camera is not available in simulator.');
    };
    ItemComponent.prototype.showOrderLines = function () {
        console.log('item showOrderLines');
        this.router.navigate(['/orderlines', this.RepName, this.CustNum, this.Name, this.Ordernum], { clearHistory: true, transition: { name: 'fade' } });
    };
    ItemComponent = __decorate([
        core_1.Component({
            selector: 'ns-item',
            moduleId: module.id,
            templateUrl: './item.component.html',
        }),
        __metadata("design:paramtypes", [app_1.app, net_1.net, page_1.Page, router_1.RouterExtensions, router_2.ActivatedRoute])
    ], ItemComponent);
    return ItemComponent;
}());
exports.ItemComponent = ItemComponent;
//# sourceMappingURL=data:application/json;base64,